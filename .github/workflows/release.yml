name: Release

on:
  push:
    branches:
      - main
      - test-release

jobs:
  release-please:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - name: Run Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: python
          token: ${{ secrets.RELEASE_TOKEN }}

  build:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Linux build
      - name: Build Linux binary
        if: runner.os == 'Linux'
        run: |
          pyinstaller --onefile ismr_downloader/__main__.py -n ismr_downloader
          mkdir artifacts
          cp dist/ismr_downloader artifacts/
          tar -czf artifacts/ismr_downloader_${{ needs.release-please.outputs.tag_name }}_linux.tar.gz -C artifacts ismr_downloader

      # macOS build
      - name: Build macOS binary
        if: runner.os == 'macOS'
        run: |
          pyinstaller --onefile ismr_downloader/__main__.py -n ismr_downloader
          mkdir artifacts
          cp dist/ismr_downloader artifacts/
          zip -j artifacts/ismr_downloader_${{ needs.release-please.outputs.tag_name }}_macos.zip artifacts/ismr_downloader

      # Windows build
      - name: Build Windows binary
        if: runner.os == 'Windows'
        run: |
          pyinstaller --onefile ismr_downloader/__main__.py -n ismr_downloader
          mkdir artifacts
          copy dist\\ismr_downloader.exe artifacts\\
          powershell Compress-Archive -Path artifacts\\ismr_downloader.exe -DestinationPath artifacts\\ismr_downloader_${{ needs.release-please.outputs.tag_name }}_windows.zip

      - name: Upload artifacts to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}